//***** Вопрос 1 *****

// OPTIONS используется для описания параметров соединения с целевым ресурсом

// По технологии CORS (en-US), с помощью метода OPTIONS направляется предварительный запрос, поэтому сервер может ответить приемлемо ли отправлять запросы этим методом
// то есть как пример его можно использовать при запросе к внешнему ресурсу
// Пример запроса:
// OPTIONS /resources/post-here/ HTTP/1.1
// Host: bar.other
// Accept: text/html,application/xhtml+xml,application/xml;q=0.9,*/*;q=0.8
// Accept-Language: en-us,en;q=0.5
// Accept-Encoding: gzip,deflate
// Accept-Charset: ISO-8859-1,utf-8;q=0.7,*;q=0.7
// Connection: keep-alive
// Origin: http://foo.example
// Access-Control-Request-Method: POST
// Access-Control-Request-Headers: X-PINGOTHER, Content-Type

// Ответ на запрос OPTIONS может содержать список допустимых методов для данного ресурса в хедере Allow
// Пример ответа:
// Allow: GET,POST,DELETE,OPTIONS

//***** Вопрос 2 *****

// HTTP/3 похож по синтаксису и семантике на HTTP/2. HTTP/3 следует той же последовательности обмена сообщениями запроса и ответа с форматом данных,
// который содержит методы, заголовки, коды состояния и тело. Однако существенное отличие HTTP/3 заключается в порядке размещения уровней протокола поверх UDP

// Преимущества HTTP/3 связаны с лежащим в основе протоколом QUIC, и как выходящие из этого преимущества;
// 1. UDP как выбор основного протокола транспортного уровня
// 2. Мультиплексирование потоков и управление потоком
// 3. Гибкое управление перегрузками
// 4. Улучшенная обработка ошибок
// 5. Установление соединения происходит быстрее
// 6. Синтаксис и семантика, Объединяя прикладной уровень на основе HTTP/3 с QUIC,
// вы получаете все преимущества усовершенствованного транспортного механизма, сохраняя при этом тот же синтаксис и семантику HTTP/2
// 7. Сжатие, HTTP/3 также использует новый механизм сжатия заголовков под названием QPACK, который является модификацией HPACK, используемой в HTTP/2

//***** Вопрос 3 *****

// XMLHttpRequest
// XMLHttpRequest, у него был метод abort(), достаточно сохранить ссылку на экземпляр реквеста и в нужное время вызвать метод.

// Axios
// В axios для закрытия промиса мы можем передать параметра cancelToken

// Fetch
// Сначала мы создаём контроллер с помощью конструктора AbortController(), а затем получаем ссылку на связанный объект AbortSignal используя свойство AbortController.signal
// Когда fetch запрос инициируется, мы передаём AbortSignal в качестве опции внутрь объекта параметров запроса
// Это связывает сигнал и контроллер с fetch запросом и позволяет нам прервать его, вызвав AbortController.abort()

//***** Вопрос 4 *****

// string
// let a = ''
// let b = ""

// number
// let a = 1
// let b = Number('1')

// boolean
// let a = true
// let b = Boolean('false')

// null
// let a = null

// undefined
// let b

// symbol
// let a = Symbol('a')

// bigInt
// let a = BigInt(10)
// let b = 10

//***** Вопрос 5 *****

// Если обратиться к переменным созданным через let, const до их объявления - мы получаем ReferenceError,
// тк как они тоже обладают всплытием он же хостинг,
// то есть при обявлении переменной её поднимают к началу блока(области видимости), но так как в начале блока она еще не проинициализирована попытка к ней обратится выдает нам ошибку, это пространство называется мертвой зоной

//***** Вопрос 6 *****

// const res = "B" + "a" + (1 - "hello")// тк операция - производитс не над числом получаем NaN, дальше тк + оператор конкатенации если хотябы один операнд строка
// console.log(res)
// BaNaN
// ps очень смешной пример XD

// const res2 = (true && 3) + "d" // логический оператор И если все выражения проходят с результатом true то возвращаетяс последнее выражение иначе первое false выражение, дальше по принципу как и с предыдущим +
// console.log(res2)
// 3d

// const res3 = Boolean(true && 3) + "d" // в целом как и в предыдущем примере,
//  сначало выполняется блок кода в скобках(выражении) к ниму применяетс метод приведения к типу boolean и дальше принцип работы + тк d строка,
//  приводим оба операнда к строке и конкатенируем
// console.log(res3)
